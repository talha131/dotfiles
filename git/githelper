#!/bin/bash 


HASH="%C(bold yellow)%h%Creset"
AUTHOR_DATE="%Cgreen%ad%Creset" # format respects --date= option
AUTHOR="%Cblue%aN%Creset"
REFS="%C(bold red)%d%Creset"
SUBJECT="%s"

FORMAT="$HASH}$AUTHOR_DATE}$AUTHOR}$REFS $SUBJECT"

ANSI_MAGENTA='\033[35m'
ANSI_RESET='\033[0m'
YELLOW='\033[33m'
BOLD=$(tput bold)
NORMAL=$(tput sgr0)

SEP="<:>:<:>:<:>"
SEP1="%C(red)$SEP%C(green)$SEP%C(blue)$SEP%C(yellow)$SEP"
SEP2="%C(yellow)$SEP%C(blue)$SEP%C(green)$SEP%C(red)$SEP"
SEPF="$SEP1$SEP2%n$SEP2$SEP1%n$SEP1$SEP2%n%n"

function merge_conflicts_possible() {
    if [ "$1" == 'upstream' -o "$1" == 'origin' ];
    then
        printf "${YELLOW}${BOLD}Fetching $1${NORMAL}\n"
        git fetch $1
        fetch_head="$1/master"
    else
        fetch_head="$1"
    fi

    printf "${YELLOW}${BOLD}Checking merge conflicts between "
    printf "${ANSI_MAGENTA}$fetch_head${ANSI_RESET} "
    printf "${YELLOW}${BOLD}and "
    printf "${ANSI_MAGENTA}$(git branch-name)${ANSI_RESET}${NORMAL}\n"

    merge_base=$(git merge-base "$fetch_head" "$(git branch-name)")

    git merge-tree $merge_base "fetch_head" "$(git branch-name)" | grep -A3 "changed in both"
}

function merge_remote() {
    printf "${YELLOW}${BOLD}Fetching $1${NORMAL}\n"
    git fetch "$1"
    if (("$(git branch-name)" == 'master'));
    then
        printf "${YELLOW}${BOLD}Doing fast forward merge${NORMAL}\n"
        git merge --ff $1/master
        printf "${YELLOW}${BOLD}Pushing to origin${NORMAL}\n"
        git push
    else 
        printf "${YELLOW}${BOLD}Doing non fast forward merge${NORMAL}\n"
        git merge --no-ff $1/master
    fi
}

function highlight_merge_commits {
    # Color merge commits specially
    sed -Ee "s/(Merge .*$)/$(printf $ANSI_MAGENTA)\1$(printf $ANSI_RESET)/" |
    # Page only if needed
    less -FXRS
}

function pretty_git_log_subject_body_patch {
    git log --color --date=short --pretty="format:${SEPF}${FORMAT}%n%b" $* |
    sed -Ee "s/}/  /g" |
    highlight_merge_commits
}

function pretty_git_log_subject_body {
    git log --color --date=short --pretty="format:${FORMAT}%n%b" $* |
    sed -Ee "s/}/  /g" |
    highlight_merge_commits
}

function pretty_git_log_graph {
    git log --color --date=short --pretty="format:${FORMAT}" --graph --topo-order $* |
    sed -Ee "s/}/  /g" |
    highlight_merge_commits
}

function pretty_git_log_subject {
     git log --color --date=short --pretty="format:${FORMAT}%n" $* |
     # Line columns up based on } delimiter
     column -s '}' -t 2> /dev/null |
     highlight_merge_commits
}

function pretty_git_log_stats {
    git log --color --date=short --pretty="format:${FORMAT}" --stat $* |
    sed -Ee "s/}/  /g" |
    # indent stats by a tab for readability
    sed 's/^ /	/g' |
    highlight_merge_commits
}
