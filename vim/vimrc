" On Windows, $HOME/.vim is $HOME/vimfiles. For consistency, replace vimfiles with .vim
" See :help vimfiles for more information
if has('win32') && !has('nvim')
     set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
endif

" Begin Plugins section                                                       {{{1
call plug#begin('~/.vim/plugged')

if !has('nvim')
    Plug 'tpope/vim-sensible'
endif
Plug 'dahu/bisectly'
Plug 'tpope/vim-speeddating'
Plug 'mzlogin/vim-markdown-toc' " Generate table of contents for Markdown files. `:GenTocGFM`
Plug 'skywind3000/asyncrun.vim'
" Plugins - File Explorer                                        {{{2
if has('mac')
    Plug '/usr/local/opt/fzf'
    Plug 'junegunn/fzf.vim' " :Files :Marks :Windows
    Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
elseif has('win32')
     Plug 'Yggdroot/LeaderF', { 'do': '.\install.bat' }
endif
Plug 'justinmk/vim-dirvish'
Plug 'kristijanhusak/vim-dirvish-git'
" Plugins - Code Complete and Snippets                                        {{{2
Plug 'neoclide/coc.nvim', {'tag': '*', 'do': { -> coc#util#install()}}
" Plugins - Motion Enhancements                                               {{{2
Plug 'justinmk/vim-sneak'
" Plugins - Syntax files and Programming Languages                            {{{2
" Plug 'Chiel92/vim-autoformat'
Plug 'sheerun/vim-polyglot'
" Plugins - Typing Utilities                                                  {{{2
Plug 'tpope/vim-rsi' " Readline key bindings
Plug 'junegunn/vim-easy-align' " Vim alignment
Plug 'tpope/vim-characterize' " press ga to reveal characters representation in decimal, octal and hex
Plug 'machakann/vim-sandwich'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary' " toggle comments
Plug 'tpope/vim-endwise'
Plug 'kshenoy/vim-signature' " Shows marks
Plug 'AndrewRadev/splitjoin.vim' " gS gJ to split and join lines
" Plugins - Distraction Free Writing                                          {{{2
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'chrisbra/NrrwRgn' " focus on a region and make the rest inaccessible. Select and call :NR
" Plugins - Utilities and Wrappers                                            {{{2
Plug 'xolox/vim-misc' | Plug 'xolox/vim-session' " Plugins - Session Management
Plug 'vim-scripts/VOoM' " View and change file outline
Plug 'guns/xterm-color-table.vim' " :XtermColorTable to show all 256 xterm colors with their RGB equivalents
Plug 'vim-scripts/DrawIt' " Draw ASCII art in Vim
Plug 'tpope/vim-eunuch' " Wrapper for UNIX shell commands
Plug 'henrik/vim-indexed-search' " Show 'Match 123 of 456 <search term>' in Vim searches
Plug 'romainl/vim-qf' " a collection of settings, commands and mappings for the quickfix window
Plug 'romainl/vim-qlist' " make include-search and definition-search populate in the quickfix window
Plug 'mhinz/vim-startify' " A start screen for Vim
" Delete buffers and close files without messing up layout
" Why it is needed? See this discussion http://superuser.com/q/289285/42415
Plug 'moll/vim-bbye'
Plug 'svermeulen/vim-yoink'
" Plugins - Version Control and File Comparison                               {{{2
Plug 'tpope/vim-fugitive'
            \ | Plug 'junegunn/gv.vim'
            \ | Plug 'tpope/vim-rhubarb'
Plug 'jreybert/vimagit'
Plug 'airblade/vim-gitgutter'
Plug 'mbbill/undotree' " Browse the undo tree
" Plugins - Theme                                                             {{{2
Plug 'morhetz/gruvbox'
Plug 'dracula/vim'
Plug 'rakr/vim-one'
Plug 'romainl/flattened'

" All of your Plugins must be added before the following line
call plug#end()            " required
" End Plugins section }}}

" Custom Functions                                                            {{{1
" from https://www.vi-improved.org/recommendations/
function! StripTrailingWhitespace()
  if !&binary && &filetype !=# 'diff'
    let l:save = winsaveview() " Save cursor position
    " vint: -ProhibitCommandWithUnintendedSideEffect -ProhibitCommandRelyOnUser
    %s/\s\+$//e
    call winrestview(l:save) " Restore cursor to saved position
  endif
endfunction

function! RemoveZeroWidthSpace()
  if !&binary && &filetype !=# 'diff'
    let l:save = winsaveview() " Save cursor position
    " vint: -ProhibitCommandWithUnintendedSideEffect -ProhibitCommandRelyOnUser
    %s/\%u200b//g
    call winrestview(l:save) " Restore cursor to saved position
  endif
endfunction

function! JSONFormat()
    execute "%!python -m json.tool"
endfunction

" from https://jordanelver.co.uk/blog/2015/05/27/working-with-vim-colorschemes/#showing-highlight-groups
function! s:SynStack()
  if !exists('*synstack')
    return
  endif
  echo map(synstack(line('.'), col('.')), "synIDattr(v:val, 'name')")
endfunction

" Customize Vim                                                               {{{1
if has('nvim')
    " Use <C-L> to clear the highlighting of :set hlsearch. From sensible.vim
    if maparg('<C-L>', 'n') ==# ''
        nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
    endif
    set inccommand=split
    " Python package for Neovim                                                   {{{2
    if has('mac')
        let g:python_host_prog = $HOME.'/.pyenv/versions/2.7.14/bin/python'
        let g:python3_host_prog = $HOME.'/.pyenv/versions/3.7.2/bin/python3'
        let $PYENV_ROOT=$HOME.'/.pyenv/'
    elseif has('win32')
        let g:python_host_prog = 'C:/Python27/python'
        let g:python3_host_prog = 'C:/Users/talha/AppData/Local/Programs/Python/Python37-32/python'
    endif
endif
" Miscellaneous Variables                                                     {{{2
set expandtab
set guioptions+=b " make sure horizontal scroll bar is visible
set number
set shiftwidth=4
set softtabstop=4
set tabstop=4
set wrap
set ignorecase
set smartcase
set hlsearch " Highlight search results
set noerrorbells visualbell t_vb= " Disable Beeping
set relativenumber
let g:netrw_bufsettings = 'noma nomod nu nobl nowrap ro rnu' " Except nu and rnu, all are netrw default values
set showcmd
" use Patience diff algorithm for generating diffs
" patch-8.1.0360 is for vim
if has('nvim') || has('patch-8.1.0360')
    set diffopt+=internal,algorithm:patience
endif
if has('mac')
    set shell=/usr/local/bin/bash
    set shellcmdflag=-c
endif

" Spelling                                                                    {{{2
set spellfile=~/.vim/spell/en.utf-8.add " Store all good words in this file
" Generate a binary spell file from text spell file. Vim does it automatically
" whenever a word is added. But when spell file is added externally, you
" need to generate it once
if empty(glob(&spellfile.'.spl'))
    exec 'mkspell!' &spellfile
endif

" Preserve file history                                                       {{{2
set undofile " write undo history to file so that undo history remains persistent
set backup " Make a backup before overwriting a file.  Leave it around after the file has been successfully written.
set writebackup " Make a backup before overwriting a file.  The backup is removed after the file was successfully written, unless the 'backup' option is also on.
set swapfile " Use a swap file for the buffer.

if !isdirectory($HOME.'/.vimTemp')
    silent call mkdir ($HOME.'/.vimTemp', 'p')
endif

set backupdir^=~/.vimTemp// " directory for backup files
set directory^=~/.vimTemp// " directory for swap files
set undodir^=~/.vimTemp// " directory for undo history

" Command Line Completion                                                     {{{2
" from [SO answer](http://stackoverflow.com/a/526940/177116)
" When you type the first tab hit will complete as much as possible, the
" second tab hit will provide a list, the third and subsequent tabs will cycle
" through completion options so you can complete the file without further keys
set wildignorecase
set wildmenu
" Show a list and then choose from the wild menu
set wildmode=list:full

" Insert Mode Completion                                                     {{{2
set completeopt-=preview

" :find                                                                       {{{2
" Add folder of current file and every folder under it to Vim's path
set path=.,**
set wildignore+=*.swp,*.bak
set wildignore+=*.pyc,*.class,*.sln,*.Master,*.csproj,*.csproj.user,*.cache,*.dll,*.pdb
set wildignore+=*.png,*.pxm,*.psd,*.pdf,*.jpg,*.gif,*.rtf,*.ico,*.icns,*.tiff
set wildignore+=*.svg,*.woff,*.ttf,*.eot,*.woff2
set wildignore+=*.exe,*.bin,*.crl,*.pem,*.crt
set wildignore+=*.plist,*.xcodeproj/**,*.framework/**/*
set wildignore+=*/.hg/**/*,*/.svn/**/*
set wildignore+=tags,cscope.*
set wildignore+=*.tar.*

" Key Mappings                                                                {{{2
" It is better to use <CR> instead or <C-R> instead of  in key mappings.
" It makes it easier to copy paste, makes the intetion clear that it's a
" single character. Sometimes when copy paste ^M gets translated into enter
" instead of being pasted as a literal
" Use <F7> to toggle spell check in the current buffer
if maparg('<F7>', 'n') ==# ''
  nnoremap <silent> <F7> :setlocal spell!<CR>
endif

" Use <F8> to toggle relative number in the current buffer
if maparg('<F8>', 'n') ==# ''
  nnoremap <silent> <F8> :setlocal relativenumber!<CR>
endif

" Leader Key                                                                  {{{2
" To map to space key, either use ' ' or "\<Space>"
" '<Space>' or '\<Space>' does not work
" For details see http://vi.stackexchange.com/a/282/5643
" :help expr-quote
" Some commands like map understand <Space> but for others you need "\<Space>"
let g:mapleader = ' '
" Write and quit silently. Useful for quiting Git commit from Vim fugitive
" which always gives following propmt after :wq
" Press ENTER or type command to continue
" See :help hit-enter
nnoremap <Leader>wq :silent wq<CR>
" I want to open Gstatus in a new tab.
" Fugitive opens diff from Gstatus in the current window.
" My file order gets mangled up after I am done with Gstatus.
" tab split = is necessary. Git fugitive commands work only if a file from Git
" repository is open. tab split opens current file in a new tab.
" 0tabmove = moves the tab to the 0th position
" Gstatus = opens Git status
" $q = closes the split that has file from tab split
nnoremap <Leader>gs :tab split \| 0tabmove \| Gstatus \| $q <CR>
nnoremap <Leader>gc :Gcommit -v<CR>
nnoremap <Leader>gd :Gvdiff<CR>
nnoremap <Leader>gw :Gwrite<CR>
nnoremap <Leader>gwq :Gwq <CR>
" vim-gitgutter
" h for hunk
nnoremap <Leader>ghh :GitGutterLineHighlightsToggle <CR>
nnoremap <Leader>ghs :GitGutterStageHunk <CR>
nnoremap <Leader>ghu :GitGutterUndoHunk <CR>
nnoremap <Leader>ghp :GitGutterPreviewHunk <CR>
" vim-bbye
nnoremap <Leader>q :w \| Bdelete<CR>
" show highlight group
nnoremap <leader>hg :call <SID>SynStack()<CR>
" Relies on LeaderF
nnoremap <Leader>f :LeaderfFile <CR>
nnoremap <Leader>b :LeaderfBuffer <CR>
nnoremap <Leader>s :LeaderfLine <CR>
nnoremap <Leader>ss :LeaderfLineAll <CR>
" search word under cursor, the pattern is treated as regex, and enter normal mode directly
noremap <Leader>r :<C-U><C-R>=printf("Leaderf rg -e %s ", expand("<cword>"))<CR><CR>

" Theme Settings                                                              {{{2
if has('mac')
    set guifont=Inconsolata:h14
    set background=dark
elseif has('win32')
    set guifont=Inconsolata:h12
endif

function! SetStatusLineColor()
    highlight StatusLine ctermfg=231 ctermbg=61 cterm=bold guifg=#f8f8f2 guibg=#6272a4 gui=bold
    highlight StatusLineNC ctermfg=231 ctermbg=243 cterm=NONE guifg=#f8f8f2 guibg=#64666d gui=NONE
endfunction

function! SetLimelightConcealColor()
    if (&background ==# 'dark')
        " bg3 from gruvbox dark mode
        let g:limelight_conceal_ctermfg = '241'
        let g:limelight_conceal_guifg = '#665c54'
    else
        " bg3 from gruvbox light mode
        let g:limelight_conceal_ctermfg = '248'
        let g:limelight_conceal_guifg = '#bdae93'
    endif
endfunction

augroup theme_related_settings
    autocmd!
    " Preserve the custom colors set in SetStatusLineColor() whenever
    " colorscheme or background is changed
    autocmd ColorScheme * call SetStatusLineColor()
    autocmd ColorScheme * call SetLimelightConcealColor()
    autocmd BufEnter * call SetStatusLineColor()
augroup END

if !has('win32') || (has('win32') && exists('g:GuiLoaded'))
	set cursorline
	set cursorcolumn
endif

" for coc-highlight
set termguicolors

colorscheme gruvbox

" Status line                                                                 {{{2
set statusline=%F " full path to file in the buffer
set statusline+=\ " separator
set statusline+=%{fugitive#statusline()} " the current branch and the currently edited file's commit
set statusline+=\ " separator
set statusline+=%m " modified flag
set statusline+=%r " read-only flag
set statusline+=%h " help buffer flag
set statusline+=%w " preview flag
set statusline+=\ " separator
set statusline+=[%L] " total number of lines in buffer
set statusline+=[%p%%] " percentage through file in lines
set statusline+=[%04l,%04v] " current line, current column
set statusline+=\ " separator
set statusline+=[%{&ff}] " current file format
set statusline+=%y " file type
set statusline+=\ " separator
set statusline+=(%{winnr()}) " window number. Useful for {count}<C-W>q
set statusline+=%{coc#status()} 

" Use ag instead of grep                                                      {{{2
if executable('rg')
    set grepprg=rg\ --vimgrep
    set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

" Terminal related settings                                                   {{{2
if (has('nvim'))
    autocmd TermOpen * set bufhidden=hide
endif

" File type Customizations                                                      {{{1
" Until https://github.com/sheerun/vim-polyglot/pull/318 is merged
autocmd BufNewFile,BufRead *.tsx set filetype=typescript.tsx

" Plugins Customizations                                                      {{{1
" vim-autoformat                                                              {{{2
let g:formatdef_fmt_custom_xml = '"tidy -xml -q --show-errors 0 --show-warnings 0 --indent-attributes 1"'
let g:formatters_xml = ['fmt_custom_xml']
let g:autoformat_verbosemode=1

" Voom                                                                        {{{2
let g:voom_tree_placement = 'right'
let g:voom_ft_modes = {'markdown': 'markdown', 'pandoc': 'markdown'}
let g:voom_always_allow_move_left = 1
augroup plugin_voom
    autocmd!
    autocmd FileType voomtree setlocal nonumber
augroup END

" xolox/vim-session                                                           {{{2
let g:session_autosave = 'yes'
let g:session_autosave_periodic = 5
let g:session_default_overwrite = 1
let g:session_autoload = 'no'
let g:session_directory = '~/.vim/sessions'

" Limelight and Goyo - Distraction Free Writing                               {{{2
augroup plugin_goyo
    autocmd!
    autocmd User GoyoEnter Limelight
    autocmd User GoyoEnter set nocursorline nocursorcolumn
    autocmd User GoyoLeave Limelight!
    autocmd User GoyoLeave set cursorline cursorcolumn
augroup END

" Vim Easy Align                                                              {{{2
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap gl <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap gl <Plug>(EasyAlign)

" vim-gitgutter                                                               {{{2
set updatetime=200
let g:gitgutter_map_keys = 0
nmap [c <Plug>GitGutterPrevHunk
nmap ]c <Plug>GitGutterNextHunk

" undotree                                                                    {{{2
let g:undotree_SplitWidth = 45
let g:undotree_SetFocusWhenToggle = 1


" startify                                                                                  {{{2
let g:startify_session_dir = '~/.vim/sessions'
let s:padding_left = repeat(' ', get(g:, 'startify_padding_left', 3))
let g:startify_list_order = [
        \ [s:padding_left .'Sessions'],       'sessions',
        \ [s:padding_left .'MRU'],            'files',
        \ [s:padding_left .'MRU '. getcwd()], 'dir',
        \ [s:padding_left .'Bookmarks'],      'bookmarks',
        \ [s:padding_left .'Commands'],       'commands',
        \ ]


" vim.fzf                                                                                  {{{2
command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
      \   <bang>0 ? fzf#vim#with_preview('up:60%')
      \           : fzf#vim#with_preview('right:50%:hidden', '?'),
\ <bang>0)




" asyncrun                                                                                  {{{2
" For vim-fugitive
command! -bang -nargs=* -complete=file Make AsyncRun -program=make @ <args>

" LeaderF                                                                                  {{{2
let g:Lf_CommandMap = {'<C-K>': ['<Up>'], '<C-J>': ['<Down>'], '<Up>': ['<C-K>'], '<Down>': ['<C-J>']}

" vim-sneak                                                                                  {{{2
let g:sneak#label = 1

" vim-yoink                                                                            {{{2
nmap <c-n> <plug>(YoinkPostPasteSwapBack)
nmap <c-p> <plug>(YoinkPostPasteSwapForward)
nmap p <plug>(YoinkPaste_p)
nmap P <plug>(YoinkPaste_P)
let g:yoinkMaxItems = 20
let g:yoinkSavePersistently = 1
let g:yoinkIncludeDeleteOperations = 1
let g:yoinkMoveCursorToEndOfPaste = 1

" coc                                                                                  {{{2
" don't give |ins-completion-menu| messages.
set shortmess+=c

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> for trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

if has('nvim')
    " Highlight symbol under cursor on CursorHold
    autocmd CursorHold * silent call CocActionAsync('highlight')
    autocmd CursorHold * silent call CocActionAsync('showSignatureHelp')
endif

let g:coc_global_extensions = [
            \'coc-yank',
            \'coc-highlight',
            \'coc-prettier',
            \'coc-pairs',
            \'coc-json',
            \'coc-css',
            \'coc-html',
            \'coc-tslint',
            \'coc-tsserver',
            \'coc-yaml',
            \'coc-ccls'
            \]

" FileType related settings                                                   {{{1
augroup filetype_related_settings
    autocmd!
    autocmd FileType objc,objcpp,cpp,c setlocal foldmethod=syntax
    autocmd FileType objcpp setlocal cindent
    autocmd FileType gitcommit setlocal colorcolumn=72 spell" highlight 72nd column in git commit
    if (has('mac'))
        autocmd FileType gitcommit,markdown,text setlocal dictionary=/usr/share/dict/words
    endif
augroup END

" vim-sandwich                                                                                {{{2
let g:sandwich#recipes = deepcopy(g:sandwich#default_recipes)
" add spaces inside bracket
let g:sandwich#recipes += [
      \   {'buns': ['{ ', ' }'], 'nesting': 1, 'match_syntax': 1, 'kind': ['add', 'replace'], 'action': ['add'], 'input': ['{']},
      \   {'buns': ['[ ', ' ]'], 'nesting': 1, 'match_syntax': 1, 'kind': ['add', 'replace'], 'action': ['add'], 'input': ['[']},
      \   {'buns': ['( ', ' )'], 'nesting': 1, 'match_syntax': 1, 'kind': ['add', 'replace'], 'action': ['add'], 'input': ['(']},
      \   {'buns': ['{\s*', '\s*}'],   'nesting': 1, 'regex': 1, 'match_syntax': 1, 'kind': ['delete', 'replace', 'textobj'], 'action': ['delete'], 'input': ['{']},
      \   {'buns': ['\[\s*', '\s*\]'], 'nesting': 1, 'regex': 1, 'match_syntax': 1, 'kind': ['delete', 'replace', 'textobj'], 'action': ['delete'], 'input': ['[']},
      \   {'buns': ['(\s*', '\s*)'],   'nesting': 1, 'regex': 1, 'match_syntax': 1, 'kind': ['delete', 'replace', 'textobj'], 'action': ['delete'], 'input': ['(']},
      \ ]

" Vim modeline                                                                {{{1
" vim:set foldmethod=marker foldlevel=1:
